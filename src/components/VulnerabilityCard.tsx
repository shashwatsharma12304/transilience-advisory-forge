import { GlassCard } from "@/components/ui/glass-card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { AlertTriangle, Calendar, User, ExternalLink, Bug, Shield } from "lucide-react";

interface CVSSScore {
  vector?: string;
  baseScore?: number;
  severity?: string;
}

interface AffectedComponent {
  component_name: string;
  affected_versions: string[];
  unaffected_versions?: string[];
}

interface VulnerabilityDetailProps {
  cve_id?: string;
  summary: string;
  description: string;
  discovery_date?: string;
  reporter?: string;
  cvss_v3?: CVSSScore;
  attack_vector?: string;
  impact_scope?: string;
  proof_of_concept?: string;
  affected_components: AffectedComponent[];
}

export const VulnerabilityCard = ({ 
  cve_id, 
  summary, 
  description, 
  discovery_date, 
  reporter, 
  cvss_v3, 
  attack_vector, 
  impact_scope,
  proof_of_concept,
  affected_components 
}: VulnerabilityDetailProps) => {
  const getCVSSColor = (score?: number) => {
    if (!score) return "bg-muted";
    if (score >= 9.0) return "danger-gradient";
    if (score >= 7.0) return "warning-gradient";
    if (score >= 4.0) return "bg-yellow-500";
    return "success-gradient";
  };

  const getSeverityColor = (severity?: string) => {
    if (!severity) return "bg-muted";
    switch (severity.toLowerCase()) {
      case "critical": return "danger-gradient";
      case "high": return "warning-gradient";
      case "medium": return "bg-yellow-500";
      case "low": return "success-gradient";
      default: return "bg-muted";
    }
  };

  return (
    <GlassCard className="p-6 space-y-6">
      <div className="flex items-start justify-between">
        <div className="space-y-2">
          <div className="flex items-center gap-3">
            <Bug className="w-5 h-5 text-primary" />
            {cve_id && (
              <Badge variant="outline" className="border-glass-border">
                {cve_id}
              </Badge>
            )}
            {cvss_v3?.baseScore && (
              <Badge className={`${getCVSSColor(cvss_v3.baseScore)} text-white border-0`}>
                CVSS {cvss_v3.baseScore}
              </Badge>
            )}
            {cvss_v3?.severity && (
              <Badge className={`${getSeverityColor(cvss_v3.severity)} text-white border-0`}>
                {cvss_v3.severity}
              </Badge>
            )}
          </div>
          <h4 className="text-lg font-semibold text-foreground">{summary}</h4>
        </div>
      </div>

      <div className="prose prose-sm max-w-none">
        <p className="text-muted-foreground leading-relaxed">{description}</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {discovery_date && (
          <div className="flex items-center gap-2 text-sm">
            <Calendar className="w-4 h-4 text-muted-foreground" />
            <span className="text-muted-foreground">Discovered: </span>
            <span className="text-foreground">{new Date(discovery_date).toLocaleDateString()}</span>
          </div>
        )}
        
        {reporter && (
          <div className="flex items-center gap-2 text-sm">
            <User className="w-4 h-4 text-muted-foreground" />
            <span className="text-muted-foreground">Reporter: </span>
            <span className="text-foreground">{reporter}</span>
          </div>
        )}
      </div>

      {attack_vector && (
        <div className="space-y-2">
          <h5 className="font-medium text-foreground flex items-center gap-2">
            <AlertTriangle className="w-4 h-4" />
            Attack Vector
          </h5>
          <p className="text-sm text-muted-foreground pl-6">{attack_vector}</p>
        </div>
      )}

      {impact_scope && (
        <div className="space-y-2">
          <h5 className="font-medium text-foreground flex items-center gap-2">
            <Shield className="w-4 h-4" />
            Impact Scope
          </h5>
          <p className="text-sm text-muted-foreground pl-6">{impact_scope}</p>
        </div>
      )}

      <div className="space-y-3">
        <h5 className="font-medium text-foreground">Affected Components</h5>
        <div className="grid gap-3">
          {affected_components.map((component, index) => (
            <div key={index} className="p-3 rounded-lg bg-white/5 border border-glass-border">
              <div className="font-medium text-sm text-foreground mb-2">{component.component_name}</div>
              <div className="flex flex-wrap gap-2">
                <div className="text-xs text-muted-foreground">Affected:</div>
                {component.affected_versions.map((version, vIndex) => (
                  <Badge key={vIndex} variant="outline" className="text-xs border-destructive text-destructive">
                    {version}
                  </Badge>
                ))}
                {component.unaffected_versions && component.unaffected_versions.length > 0 && (
                  <>
                    <div className="text-xs text-muted-foreground ml-2">Safe:</div>
                    {component.unaffected_versions.map((version, vIndex) => (
                      <Badge key={vIndex} variant="outline" className="text-xs border-success text-success">
                        {version}
                      </Badge>
                    ))}
                  </>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {proof_of_concept && (
        <div className="pt-4 border-t border-glass-border">
          <Button variant="outline" size="sm" className="border-glass-border hover:bg-white/10">
            <ExternalLink className="w-4 h-4 mr-2" />
            View Proof of Concept
          </Button>
        </div>
      )}
    </GlassCard>
  );
};